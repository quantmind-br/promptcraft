description = "Pre-flight validation of a PRP before execution"

prompt = """
# Validate PRP

## PRP File: $ARGUMENTS

Pre-flight validation of a PRP to ensure all context and dependencies are available before execution.

## Validation Process

1. **Parse PRP**
   - Read the specified PRP file: @PRPs/$ARGUMENTS
   - Extract all file references, URLs, and dependencies
   - Parse validation checklist items

2. **Context Validation**
   - Check all referenced files exist
   - Validate all URLs are accessible
   - Verify environment dependencies are available
   - Check for required API keys/credentials

3. **Codebase Analysis**
   - Scan for similar patterns mentioned in PRP
   - Validate existing examples are current
   - Check for architectural consistency

4. **Dependency Check**
   - Verify all required libraries are installed
   - Check version compatibility
   - Validate external service connectivity

5. **Risk Assessment**
   - Analyze failure patterns mentioned in PRP
   - Assess complexity and confidence score
   - Identify potential bottlenecks

## Validation Gates

### File References

```bash
# Check all referenced files exist
echo "Validating file references..."
for file in $(grep -o 'file: [^[:space:]]*' @PRPs/$ARGUMENTS | cut -d' ' -f2); do
    if [ ! -f "$file" ]; then
        echo "‚ùå Missing file: $file"
        exit 1
    else
        echo "‚úÖ Found: $file"
    fi
done
```

### URL Accessibility

```bash
# Check all referenced URLs are accessible
echo "Validating URL references..."
for url in $(grep -o 'url: [^[:space:]]*' @PRPs/$ARGUMENTS | cut -d' ' -f2); do
    if curl -s --head "$url" > /dev/null; then
        echo "‚úÖ Accessible: $url"
    else
        echo "‚ö†Ô∏è  Cannot access: $url"
    fi
done
```

### Environment Dependencies

```bash
# Check environment setup
echo "Validating environment dependencies..."

# Check Python dependencies
if command -v python3 &> /dev/null; then
    echo "‚úÖ Python3 available"

    # Check specific imports mentioned in PRP
    python3 -c "
import re
import sys
# Read PRP file and extract import statements
with open('PRPs/$ARGUMENTS', 'r') as f:
    content = f.read()
# Find import statements in code blocks
imports = re.findall(r'^(?:import|from)\\s+([a-zA-Z_][a-zA-Z0-9_]*)', content, re.MULTILINE)
unique_imports = set(imports)
failed_imports = []
for module in unique_imports:
    try:
        __import__(module)
        print(f'‚úÖ Module available: {module}')
    except ImportError:
        failed_imports.append(module)
        print(f'‚ö†Ô∏è  Module missing: {module}')
if failed_imports:
    print(f'‚ùå Missing modules: {failed_imports}')
    sys.exit(1)
"
else
    echo "‚ùå Python3 not available"
    exit 1
fi
```

### API Connectivity

```bash
# Check external API connectivity
echo "Validating API connectivity..."

# Check common APIs mentioned in PRP
if grep -q "api.openai.com" "PRPs/$ARGUMENTS"; then
    if [ -n "$OPENAI_API_KEY" ]; then
        echo "‚úÖ OpenAI API key configured"
    else
        echo "‚ö†Ô∏è  OpenAI API key not set"
    fi
fi

if grep -q "api.anthropic.com" "PRPs/$ARGUMENTS"; then
    if [ -n "$ANTHROPIC_API_KEY" ]; then
        echo "‚úÖ Anthropic API key configured"
    else
        echo "‚ö†Ô∏è  Anthropic API key not set"
    fi
fi

# Add more API checks as needed
```

## Validation Report

Generate a comprehensive validation report with:

1. **Context Completeness Score** (0-100)
2. **Dependency Readiness** (Ready/Issues/Blocked)
3. **Risk Assessment** (Low/Medium/High)
4. **Recommended Actions** (before execution)

## Output Format

```
üîç PRP Validation Report
========================
üìÅ Context Validation: [PASS/FAIL]
- Files referenced: X/X found
- URLs accessible: X/X responding
- Examples current: [YES/NO]
üîß Dependencies: [READY/ISSUES/BLOCKED]
- Python modules: X/X available
- External services: X/X accessible
- API keys: X/X configured
‚ö†Ô∏è  Risk Assessment: [LOW/MEDIUM/HIGH]
- Complexity score: X/10
- Failure patterns: X identified
- Mitigation strategies: X documented
üìä Readiness Score: XX/100
üéØ Recommended Actions:
[ ] Install missing dependencies
[ ] Configure missing API keys
[ ] Update stale examples
[ ] Review risk mitigation strategies
Status: [READY_TO_EXECUTE/NEEDS_ATTENTION/BLOCKED]
```

## Auto-Fix Suggestions

When validation fails, provide actionable suggestions:

```bash
# Auto-generate fixes where possible
if [ "$STATUS" != "READY_TO_EXECUTE" ]; then
    echo "üîß Auto-fix suggestions:"
    echo "!pip install missing-module-1 missing-module-2"
    echo "export MISSING_API_KEY=your_key_here"
    echo "!git checkout HEAD -- outdated-example.py"
fi
```

## Validation Components

### Context Analysis
- Extract all file: references and verify existence
- Test all url: links for accessibility
- Check docfile: references in @PRPs/ai_docs/
- Validate example code snippets are current

### Dependency Analysis
- Parse import statements from code blocks
- Check Python package availability
- Verify external service dependencies
- Test API key configuration

### Risk Analysis
- Evaluate complexity score vs confidence level
- Check for known failure patterns
- Assess implementation time estimates
- Identify potential blockers

### Environment Readiness
- Python version and virtual environment
- Required packages and versions
- API keys and configuration
- External service connectivity

## Integration Notes

This validation should be run before PRP execution to catch issues early and provide clear guidance on what needs to be resolved before implementation can succeed.

Save validation report to: `PRPs/validation_reports/validation_$ARGUMENTS_[timestamp].md`
"""