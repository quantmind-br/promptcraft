name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Lint with ruff (if available)
      run: |
        pip install ruff || echo "Ruff not available, skipping"
        ruff check . || echo "Ruff check completed with warnings"
      continue-on-error: true

    - name: Type check with mypy (if available)
      run: |
        pip install mypy || echo "MyPy not available, skipping"
        mypy src/promptcraft || echo "MyPy check completed"
      continue-on-error: true

    - name: Run tests with coverage
      run: |
        python -m pytest --cov=promptcraft --cov-report=term-missing --cov-report=xml:coverage.xml --cov-fail-under=95 --cov-branch tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Generate coverage badge
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        pip install coverage-badge
        coverage-badge -o coverage.svg -f

    - name: Upload coverage badge
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-badge
        path: coverage.svg

  coverage-report:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run tests and generate HTML coverage report
      run: |
        python -m pytest --cov=promptcraft --cov-report=html:htmlcov --cov-report=xml:coverage.xml --cov-fail-under=95 --cov-branch tests/

    - name: Deploy coverage report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./htmlcov
        destination_dir: coverage

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read coverage report
          let coverageText = '';
          try {
            const result = await exec.exec('python', ['-m', 'coverage', 'report', '--format=markdown'], {
              listeners: {
                stdout: (data) => {
                  coverageText += data.toString();
                }
              }
            });
          } catch (error) {
            coverageText = 'Could not generate coverage report';
          }
          
          // Create or update PR comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Coverage Report')
          );
          
          const body = `## Coverage Report
          
          \`\`\`
          ${coverageText}
          \`\`\`
          
          ðŸ“Š [Full Coverage Report](https://${context.repo.owner}.github.io/${context.repo.repo}/coverage/)
          
          *Coverage report generated by GitHub Actions*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }